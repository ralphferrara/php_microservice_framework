<?php
//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||
//|| Core3 :: Copyright Syhora 2016
//|| SEO
//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||

//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||
//|| Class
//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||

	class Server {

		//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||
		//|| Construct
		//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-= -=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||

        static function memory($area = 'total') {
            switch($area) {
                case 'free' :
                    $fh = fopen('/proc/meminfo', 'r');
                    $mem = -1;
                    while ($line = fgets($fh)) { $pieces = array(); if (preg_match('/^MemFree:\s+(\d+)\skB$/', $line, $pieces)) { $mem = $pieces[1]; break; } }
                    fclose($fh);
                    return $mem;
                    break;
                case 'total' :
                    $fh = fopen('/proc/meminfo', 'r');
                    $mem = -1;
                    while ($line = fgets($fh)) { $pieces = array(); if (preg_match('/^MemTotal:\s+(\d+)\skB$/', $line, $pieces)) { $mem = $pieces[1]; break; } }
                    fclose($fh);
                    return $mem;
                    break;
                default : return -2;
            }
        }

		//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||
		//|| CPU
		//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-= -=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||

		static function cpu() {
            $load = sys_getloadavg();
            return $load[0];
        }

	//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||
		//|| CPU
		//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-= -=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||

		static function storage($area = 'total', $partition = '/') {
            switch($area) {
                case 'free'             : return (disk_free_space($partition) / 1024); break;
                case 'total'            : return (disk_total_space($partition) / 1024); break;
                case 'partitions'       :
                    $df     = shell_exec('df');
                    $lines  = explode(chr(10), str_replace(chr(13),chr(10),$df));
                    $final  = array();
                    for($x=1;$x<count($lines);$x++) if (trim($lines[$x] != '')) {
                        $temp = explode('|', str_replace(array('||||','|||','||'), '|', str_replace(array('   ',' '), '|', $lines[$x])));
                        if (count($temp) != 6) return 'ERR';
                        $final[$temp[0]] = array('used' => $temp[2], 'total' => $temp[3], 'percent' => floor(($temp[2] / $temp[3]) * 100));
                    }
                    return $final;
                default      : return -2;
            }
        }

		//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||
		//|| EOC
		//||=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-||

	}
